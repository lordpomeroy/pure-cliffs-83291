angular.module("challengeApp", [ "ngTable", "ui.bootstrap", "ui.router", "appRoutes", "AppCtrl", "MainCtrl", "StatisticCtrl", "ChampionStatisticCtrl", "AlertService", "SummonerService", "StatisticService", "ChampionService" ]), 
angular.module("appRoutes", []).config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    "use strict";
    $stateProvider.state("home", {
        url: "/home",
        templateUrl: "system/views/home.html",
        controller: "MainController"
    }).state("statistic", {
        url: "/statistic/:region",
        templateUrl: "system/views/statistic.html",
        controller: "StatisticController"
    }).state("statistic.champion", {
        url: "/:champion",
        templateUrl: "system/views/champion.html",
        controller: "ChampionStatisticController",
        resolve: {
            onEnter: [ "$stateParams", "StatisticService", function($stateParams, StatisticService) {
                return StatisticService.get($stateParams.region);
            } ]
        }
    }).state("about", {
        url: "/about",
        templateUrl: "system/views/about.html"
    }), $urlRouterProvider.otherwise("/home");
} ]).run([ "$state", "$rootScope", "$stateParams", function($state, $rootScope, $stateParams) {
    "use strict";
    $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
        $rootScope.isRouteLoading = !0;
    }), $rootScope.$on("$stateChangeSuccess", function() {
        $rootScope.isRouteLoading = !1;
    }), $rootScope.$on("$stateNotFound", function(event, unfoundState, fromState, fromParams) {
        console.log("State not Found"), console.log(unfoundState);
    }), $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
        console.log("Error Changing State"), console.log(error);
    });
} ]), angular.module("AppCtrl", []).controller("AppController", [ "$scope", "AlertService", function($scope, AlertService) {
    "use strict";
    $scope.alerts = AlertService.alerts;
} ]), angular.module("ChampionStatisticCtrl", []).controller("ChampionStatisticController", [ "$scope", "$filter", "$state", "StatisticService", "ChampionService", "$stateParams", "NgTableParams", function($scope, $filter, $state, StatisticService, ChampionService, $stateParams, NgTableParams) {
    "use strict";
    $scope.championData = ChampionService.champions[$stateParams.champion], $scope.championStatistic = StatisticService.statistic.champions[$scope.championData.key], 
    $scope.state = $state.current.name, $scope.region = $state.params.region, $scope.tableParams = new NgTableParams({
        count: 25,
        sorting: {
            championPoints: "desc"
        }
    }, {
        total: $scope.championStatistic.players.length,
        getData: function(params) {
            var orderedData = $filter("filter")($scope.championStatistic.players, $scope.filter);
            orderedData = params.sorting() ? $filter("orderBy")(orderedData, params.orderBy()) : orderedData, 
            params.total(orderedData.length);
            var pageData = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
            return pageData;
        }
    });
} ]), angular.module("MainCtrl", []).controller("MainController", [ "$scope", "SummonerService", "StatisticService", function($scope, SummonerService, StatisticService) {
    "use strict";
    $scope.itemArray = [ "BR", "EUNE", "EUW", "LAN", "LAS", "NA", "OCE", "RU", "TU", "SEA", "KR" ], 
    $scope.selected = $scope.itemArray[2], $scope.searching = !1, $scope.summoner = null, 
    $scope.sorting = "score", $scope.order = "asc", $scope.searchSummoner = function() {
        $scope.searching = !0, $scope.summoner = null, SummonerService.getOne($scope.selected, $scope.summonerName).then(function() {
            if (SummonerService.summoner) {
                $scope.summoner = SummonerService.summoner, $scope.masteryScore = 0;
                for (var i = 0; i < $scope.summoner.masteries.length; i++) $scope.masteryScore += $scope.summoner.masteries[i].championLevel;
                "EUW" === $scope.selected || "NA" === $scope.selected ? StatisticService.get($scope.selected).then(function() {
                    $scope.championStatistic = StatisticService.statistic.champions, $scope.summonerCount = StatisticService.statistic.summonerCount;
                    var sortByPoints = function(a, b) {
                        return b.championPoints - a.championPoints;
                    };
                    for (var champion in $scope.championStatistic) for (var i = 0; i < $scope.summoner.masteries.length; i++) if (champion === $scope.summoner.masteries[i].champion.key) {
                        $scope.championStatistic[champion].players.sort(sortByPoints);
                        for (var j = 0; j < $scope.championStatistic[champion].players.length; j++) if ($scope.championStatistic[champion].players[j].summonerName === $scope.summoner.summonerName) {
                            $scope.summoner.masteries[i].ranking = j + 1;
                            break;
                        }
                        break;
                    }
                    $scope.searching = !1;
                }) : $scope.searching = !1;
            } else $scope.searching = !1;
        });
    }, $scope.selectRegion = function(regionIndex) {
        $scope.selected = $scope.itemArray[regionIndex];
    }, $scope.searchAgain = function() {
        $scope.searching = !1, $scope.summoner = null, $scope.summonerName = "";
    }, $scope.sortByScore = function() {
        "score" === $scope.sorting && "asc" === $scope.order ? $scope.order = "desc" : $scope.order = "asc", 
        $scope.sorting = "score", $scope.summoner.masteries.sort(function(a, b) {
            return "asc" === $scope.order ? a.championPoints - b.championPoints : b.championPoints - a.championPoints;
        });
    }, $scope.sortByMax = function() {
        $scope.sorting = "max", $scope.summoner.masteries.sort(function(a, b) {
            return 5 === a.championLevel && 5 === b.championLevel ? a.championPoints - b.championPoints : 5 === a.championLevel ? 1 : 5 === b.championLevel ? -1 : a.championPointsUntilNextLevel - b.championPointsUntilNextLevel;
        });
    }, $scope.sortByRanking = function() {
        "ranking" === $scope.sorting && "asc" === $scope.order ? $scope.order = "desc" : $scope.order = "asc", 
        $scope.sorting = "ranking", $scope.summoner.masteries.sort(function(a, b) {
            return "asc" === $scope.order ? a.ranking - b.ranking : b.ranking - a.ranking;
        });
    };
} ]), angular.module("StatisticCtrl", []).controller("StatisticController", [ "$scope", "$state", "StatisticService", "ChampionService", function($scope, $state, StatisticService, ChampionService) {
    "use strict";
    $scope.itemArray = [ "EUW", "NA" ], $scope.state = $state.current.name, $scope.selected = $state.params.region, 
    $scope.sorting = "alpha", $scope.searching = !0;
    var sortable = [], avg = [];
    StatisticService.get($scope.selected).then(function() {
        $scope.championStatistic = StatisticService.statistic.champions, $scope.summonerCount = StatisticService.statistic.summonerCount, 
        $scope.champions = ChampionService.champions;
        for (var champion in $scope.champions) sortable.push($scope.champions[champion]), 
        avg.push($scope.champions[champion]);
        sortable.sort(function(a, b) {
            return $scope.championStatistic[a.key].totalChampionPoints - $scope.championStatistic[b.key].totalChampionPoints;
        }), avg.sort(function(a, b) {
            return $scope.championStatistic[a.key].totalChampionPoints / $scope.championStatistic[a.key].totalPlayers - $scope.championStatistic[b.key].totalChampionPoints / $scope.championStatistic[b.key].totalPlayers;
        }), console.log(avg), $scope.searching = !1;
    }), $scope.selectRegion = function(regionIndex) {
        $state.go("statistic", {
            region: $scope.itemArray[regionIndex]
        }, {
            reload: !0
        });
    }, $scope.sortByScore = function() {
        $scope.sorting = "score", $scope.champions = sortable;
    }, $scope.sortByAverage = function() {
        $scope.sorting = "avg", $scope.champions = avg;
    }, $scope.sortByAlpha = function() {
        $scope.sorting = "alpha", $scope.champions = ChampionService.champions;
    };
} ]), angular.module("AlertService", []).factory("AlertService", [ "$timeout", function($timeout) {
    "use strict";
    var AlertService = {
        alerts: []
    }, height = 62, alertIndex = 0, addAlert = function(text, type) {
        AlertService.alerts.push({
            msg: text,
            type: type,
            pos: alertIndex * height
        }), alertIndex++, $timeout(function() {
            AlertService.closeAlert(0);
        }, 3e3);
    };
    return AlertService.addDanger = function(text) {
        addAlert(text, "alert-danger");
    }, AlertService.addErrorMessages = function(array) {
        for (var i = 0; i < array.length; i++) AlertService.addDanger(array[i].msg);
    }, AlertService.addInfo = function(text) {
        addAlert(text, "alert-info");
    }, AlertService.addSuccess = function(text) {
        addAlert(text, "alert-success");
    }, AlertService.addWarning = function(text) {
        addAlert(text, "alert-warning");
    }, AlertService.closeAlert = function(index) {
        AlertService.alerts.splice(index, 1);
        for (var i = index; i < AlertService.alerts.length; i++) AlertService.alerts[i].pos -= height;
        alertIndex > 0 && alertIndex--;
    }, AlertService;
} ]), angular.module("ChampionService", []).factory("ChampionService", [ "$http", "AlertService", function($http, AlertService) {
    "use strict";
    var ChampionService = {
        champions: {}
    };
    return ChampionService.get = function() {
        return $http.get("/api/static/champion", {}).then(function(body) {
            console.log(body.data);
            for (var key in body.data) ChampionService.champions[body.data[key].id] = body.data[key];
        }, function(error) {
            AlertService.addErrorMessages(error.data);
        });
    }, ChampionService.getByKey = function(key) {
        for (var champion in ChampionService.champions) if (ChampionService.champions[champion].key === key.toString()) return ChampionService.champions[champion];
    }, ChampionService;
} ]), angular.module("StatisticService", []).factory("StatisticService", [ "$http", "ChampionService", "AlertService", function($http, ChampionService, AlertService) {
    "use strict";
    var StatisticService = {
        statistic: {}
    };
    return StatisticService.get = function(region) {
        return $http.get("/api/statistic/" + region, {}).then(function(body) {
            return StatisticService.statistic = body.data, ChampionService.get();
        }, function(error) {
            AlertService.addErrorMessages(error.data);
        });
    }, StatisticService;
} ]), angular.module("SummonerService", []).factory("SummonerService", [ "$http", "$q", "ChampionService", "AlertService", function($http, $q, ChampionService, AlertService) {
    "use strict";
    var SummonerService = {
        summoner: {}
    };
    return SummonerService.getOne = function(region, summonerName) {
        return SummonerService.summoner = void 0, $http.get("/api/summoner/" + region + "/" + summonerName, {}).then(function(body) {
            SummonerService.summoner = body.data, ChampionService.get().then(function() {
                for (var i = 0; i < SummonerService.summoner.masteries.length; i++) SummonerService.summoner.masteries[i].champion = ChampionService.getByKey(SummonerService.summoner.masteries[i].championId), 
                delete SummonerService.summoner.masteries[i].championId;
            });
        }, function(error) {
            AlertService.addErrorMessages(error.data);
        });
    }, SummonerService;
} ]);